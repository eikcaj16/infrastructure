AWSTemplateFormatVersion: 2010-09-09
Description: CSYE 6225 Assignment 9
Parameters:
  VpcCidrBlock:
    Description: CIDR block for VPC
    Type: String
    Default: 10.0.0.0/16
  Subnet1CidrBlock:
    Description: CIDR block for Subnet 1
    Type: String
    Default: 10.0.0.0/24
  Subnet2CidrBlock:
    Description: CIDR block for Subnet 2
    Type: String
    Default: 10.0.1.0/24
  Subnet3CidrBlock:
    Description: CIDR block for Subnet 3
    Type: String
    Default: 10.0.2.0/24
  RdsSubnet1CidrBlock:
    Description: CIDR block for RDS Subnet 1
    Type: String
    Default: 10.0.4.0/24
  RdsSubnet2CidrBlock:
    Description: CIDR block for RDS Subnet 2
    Type: String
    Default: 10.0.5.0/24
  RdsSubnet3CidrBlock:
    Description: CIDR block for RDS Subnet 3
    Type: String
    Default: 10.0.6.0/24
  RouteDestinationCidrBlock:
    Description: Description CIDR block for Route
    Type: String
    Default: 0.0.0.0/0
  AmiId:
    Description: AMI Id
    Type: String
    Default: ami-09205eee4bc9965d0
  Environment:
    Description: Environent (dev/prod)
    Type: String
    Default: dev
  DbPassword:
    Description: RDS DB Password
    Type: String
    Default: csYe_yiQing_6225
  DbName:
    Description: RDS DB name, username, and instance identifier
    Type: String
    Default: csye6225
  DomainName:
    Description: Domain Name
    Type: String
    Default: yiqingjackiehuang.me
Resources:
  myVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
  mySubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: !Ref Subnet1CidrBlock
      AvailabilityZone: !Select 
        - '0'
        - !GetAZs ''
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
  mySubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: !Ref Subnet2CidrBlock
      AvailabilityZone: !Select 
        - '1'
        - !GetAZs ''
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
  mySubnet3:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: !Ref Subnet3CidrBlock
      AvailabilityZone: !Select 
        - '2'
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
  myRdsSubnet1: # RDS Subnet
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: !Ref RdsSubnet1CidrBlock
      AvailabilityZone: !Select 
        - '0'
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
  myRdsSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: !Ref RdsSubnet2CidrBlock
      AvailabilityZone: !Select 
        - '1'
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
  myRdsSubnet3:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: !Ref RdsSubnet3CidrBlock
      AvailabilityZone: !Select 
        - '2'
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
  myInternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref myVPC
      InternetGatewayId: !Ref myInternetGateway
  myRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: Public
  myRdsRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: Private
  mySubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref mySubnet1
      RouteTableId: !Ref myRouteTable
  mySubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref mySubnet2
      RouteTableId: !Ref myRouteTable
  mySubnet3RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref mySubnet3
      RouteTableId: !Ref myRouteTable
  myRdsSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref myRdsSubnet1
      RouteTableId: !Ref myRdsRouteTable
  myRdsSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref myRdsSubnet2
      RouteTableId: !Ref myRdsRouteTable
  myRdsSubnet3RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref myRdsSubnet3
      RouteTableId: !Ref myRdsRouteTable
  myRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref myRouteTable
      DestinationCidrBlock: !Ref RouteDestinationCidrBlock
      GatewayId: !Ref myInternetGateway
  # myRdsRoute:
  #   Type: 'AWS::EC2::Route'
  #   Properties:
  #     RouteTableId: !Ref myRdsRouteTable
      # DestinationCidrBlock: !Ref RouteDestinationCidrBlock
  appSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: APP Security Group
      VpcId: !Ref myVPC
      SecurityGroupEgress:
        - IpProtocol: '-1'
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: '-1'
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0
          # DestinationSecurityGroupId: !Ref rdsSecurityGroup
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          # CidrIp: 0.0.0.0/0
          SourceSecurityGroupId: !Ref loadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          # CidrIp: 0.0.0.0/0
          SourceSecurityGroupId: !Ref loadBalancerSecurityGroup
        # - IpProtocol: tcp
        #   FromPort: 443
        #   ToPort: 443
        #   CidrIp: 0.0.0.0/0
  rdsSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: RDS Security Group
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          # CidrIp: 0.0.0.0/0
          SourceSecurityGroupId: !Ref appSecurityGroup
  loadBalancerSecurityGroup:
    DependsOn: myInternetGateway
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Load Balancer Security Group
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
  MyS3Bucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Delete
    Properties:
      BucketName: !Join ['.', [!Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]], !Ref Environment, 'yiqingjackiehuang.me']]
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'
      LifecycleConfiguration:
        Rules:
          - Id: Rule for TOs from STANDARD to STANDARD_IA
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
  myRdsDbSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: Subnet Group for DB (including myRdsSubnet[1-3])
      SubnetIds:
        - !Ref myRdsSubnet1
        - !Ref myRdsSubnet2
        - !Ref myRdsSubnet3
  myRdsDbSecurityGroup:
    Type: 'AWS::RDS::DBSecurityGroup'
    Properties:
      GroupDescription: Security Group for DB (attach )
      EC2VpcId: !Ref myVPC
      DBSecurityGroupIngress:
        - EC2SecurityGroupId: !Ref appSecurityGroup
  myRdsDbParameterGroup:
    Type: 'AWS::RDS::DBParameterGroup'
    Properties:
      Description: MySQL Parameter Group
      Family: mysql5.7
  myRdsDbInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBParameterGroupName: !Ref myRdsDbParameterGroup
      DBInstanceClass: db.t3.micro
      AllocatedStorage: 20
      Engine: MySQL
      EngineVersion: 5.7
      MultiAZ: false
      DBInstanceIdentifier: !Ref DbName
      MasterUsername: !Ref DbName
      MasterUserPassword: !Ref DbPassword
      DBSubnetGroupName: !Ref myRdsDbSubnetGroup
      PubliclyAccessible: false
      DBName: !Ref DbName
      DBSecurityGroups:
        - !Ref myRdsDbSecurityGroup
  webAppServerlessLambdaPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: EC2-Lambda
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Resource: "*"
            Action:
              - 'sns:List*'
              - 'sns:Get*'
              - 'sns:Pub*'
              - "dynamodb:Get*"
              - "dynamodb:Put*"
  myIamPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: WebAppS3
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 's3:GetObject*'
              - 's3:PutObject*'
              - 's3:DeleteObject*'
            Resource:
              - !GetAtt MyS3Bucket.Arn
              - !Join ['', [!GetAtt MyS3Bucket.Arn, '/*']]
  codeDeployEC2S3IamPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: CodeDeploy-EC2-S3
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 's3:Get*'
              - 's3:List*'
            Resource:
              - !Join ['', ['arn:aws:s3:::eikcaj16.', !Ref Environment]]
              - !Join ['', ['arn:aws:s3:::eikcaj16.', !Ref Environment, '/*']]
  myIamRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Description: EC2-CSYE6225 IAM Role
      RoleName: EC2-CSYE6225
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Ref myIamPolicy
        - !Ref codeDeployEC2S3IamPolicy
        - !Ref webAppServerlessLambdaPolicy
        - 'arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy'
        - 'arn:aws:iam::aws:policy/CloudWatchAgentAdminPolicy'
  myIamInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      InstanceProfileName: EC2-CSYE6225-Instance-Profile
      Path: /
      Roles:
        - !Ref myIamRole
  MyEC2LaunchConfig:
    # DependsOn: myRdsDbInstance
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      LaunchConfigurationName: asg_launch_config
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            DeleteOnTermination: 'true'
            VolumeSize: '20'
      ImageId: !Ref AmiId
      InstanceType: t2.micro
      KeyName: csye6225_aws
      AssociatePublicIpAddress: True
      IamInstanceProfile: !Ref myIamInstanceProfile
      SecurityGroups:
        - !Ref appSecurityGroup
      UserData: # sudo reboot
        'Fn::Base64':
          !Sub |
            #!/bin/bash -xe
            cd /home/ec2-user/webservice
            sed -i -e 's/"NAME": "webservice_db"/"NAME": "${DbName}"/' ./django_project_1/settings.py
            sed -i -e 's/"USER": "root"/"USER": "${DbName}"/' ./django_project_1/settings.py
            sed -i -e 's/"PASSWORD": "abc12345"/"PASSWORD": "${DbPassword}"/' ./django_project_1/settings.py
            sed -i -e 's/"HOST": "127.0.0.1"/"HOST": "${myRdsDbInstance.Endpoint.Address}"/' ./django_project_1/settings.py
            sed -i -e 's/AWS_STORAGE_BUCKET_NAME = ""/AWS_STORAGE_BUCKET_NAME = "${MyS3Bucket.Arn}"/' ./django_project_1/settings.py
            sed -i -e 's/arn:aws:s3::://' ./django_project_1/settings.py
            echo "DB_Username=${DbName}\nDB_pw=${DbPassword}\nDB_hostname=${myRdsDbInstance.Endpoint.Address}\nS3_bucket=${MyS3Bucket.Arn}" >> info.txt
            ls
            sudo reboot
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Scale-up if average cpu > 5% for 1 min"
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 30
      EvaluationPeriods: 2
      Threshold: 5
      AlarmActions:
        - !Ref MyAppScaleUpPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref MyEC2AutoScalingGroup
      ComparisonOperator: GreaterThanThreshold
  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Scale-up if average cpu < 3% for 1 min"
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 30
      EvaluationPeriods: 2
      Threshold: 3
      AlarmActions:
        - !Ref MyAppScaleDownPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref MyEC2AutoScalingGroup
      ComparisonOperator: LessThanThreshold
  MyEC2AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MinSize: 1
      MaxSize: 5
      Cooldown: 60
      DesiredCapacity: 1
      VPCZoneIdentifier:
        - !Ref mySubnet1
        # - !Ref mySubnet2
      AvailabilityZones:
        - us-east-1a
      LaunchConfigurationName: !Ref MyEC2LaunchConfig
      TargetGroupARNs:
        - !Ref MyAppLoadBalancerTargetGroup
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
          PropagateAtLaunch: true
  MyAppScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref MyEC2AutoScalingGroup
      ScalingAdjustment: 1
  MyAppScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref MyEC2AutoScalingGroup
      ScalingAdjustment: -1
  MyAppLoadBalancer:
    DependsOn: AttachGateway
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !Ref mySubnet1
        - !Ref mySubnet2
      SecurityGroups:
        - !Ref loadBalancerSecurityGroup
  MyAppLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MyAppLoadBalancerTargetGroup
      LoadBalancerArn: !Ref MyAppLoadBalancer
      Port: 80
      Protocol: HTTP
  MyAppLoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref myVPC
  MyDNSGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Join [ ".", [!Ref Environment, !Ref DomainName, '']]
      RecordSets:
        - Name: !Join [ ".", [!Ref Environment, !Ref DomainName]]
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt MyAppLoadBalancer.CanonicalHostedZoneID
            DNSName: !GetAtt MyAppLoadBalancer.DNSName
  MyCodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CodeDeployServiceRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - 'codedeploy.amazonaws.com'
                - 'ec2.amazonaws.com'
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole'
  # MyAppCodeDeploy:
  #   Type: AWS::CodeDeploy::Application
  #   Properties:
  #     ApplicationName: csye6225-webapp
  #     ComputePlatform: Server
  MyDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: csye6225-webapp
      DeploymentGroupName: csye6225-webapp-deployment
      AutoScalingGroups:
        - !Ref MyEC2AutoScalingGroup
      DeploymentStyle:
        DeploymentType: 'IN_PLACE'
        DeploymentOption: 'WITHOUT_TRAFFIC_CONTROL'
      DeploymentConfigName: 'CodeDeployDefault.AllAtOnce'
      Ec2TagFilters:
        - Key: Name
          Type: 'KEY_AND_VALUE'
          Value: !Ref 'AWS::StackName'
      Deployment:
        IgnoreApplicationStopFailures: true
        Revision:
          RevisionType: S3
          S3Location:
            Bucket: !Join ['', ['eikcaj16.', !Ref Environment]]
            BundleType: Zip
            Key: webservice.zip
      ServiceRoleArn: !GetAtt MyCodeDeployServiceRole.Arn
      # AutoRollbackConfiguration:
      #   Enabled: true
      #   Events:
      #     - 'DEPLOYMENT_FAILURE'
  myDynamoDB:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeName: "user_id"
          AttributeType: "S"
      KeySchema: 
        - AttributeName: "user_id"
          KeyType: "HASH"
      BillingMode: PAY_PER_REQUEST
      TableName: csye6225
      TimeToLiveSpecification: 
        AttributeName: "expire_time"
        Enabled: true
  myLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: MyEmailSenderFunction
      Handler: aws_lambda.lambda_handler
      Role: 
        Fn::GetAtt: [myLambdaExecutionRole, Arn]
      Code:
        S3Bucket: !Join ['', ['eikcaj16.', !Ref Environment]]
        S3Key: lambda_handler.zip
      PackageType: Zip
      Runtime: python3.6
      Timeout: 10
      TracingConfig:
        Mode: Active
  myLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaDynamoDBExecutionRole
      RoleName: myLambdaExecutionRole
  myLambdaExecutionPloicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "ses:SendEmail"
              - "ses:SendRawEmail"
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
              - "dynamodb:Get*"
              - "dynamodb:Put*"
            Resource: "*"
      PolicyName: "Lambda-Execution-Ploicy"
      Roles:
        - !Ref myLambdaExecutionRole
  LambdaInvokePermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn:  !Ref mySNSTopic 
      FunctionName: !Ref myLambdaFunction

  mySNSTopic: 
    Type: AWS::SNS::Topic
    Properties: 
      DisplayName: csye6225
      TopicName: csye6225
      Subscription:  
      - Endpoint: !GetAtt myLambdaFunction.Arn
        Protocol: lambda
  # MyEC2Instance:
  #   DependsOn: myRdsDbInstance
  #   Type: 'AWS::EC2::Instance'
  #   Properties:
  #     BlockDeviceMappings:
  #       - DeviceName: /dev/xvda
  #         Ebs:
  #           VolumeType: gp2
  #           DeleteOnTermination: 'true'
  #           VolumeSize: '20'
  #     SecurityGroupIds:
  #       - !Ref appSecurityGroup
  #     ImageId: !Ref AmiId
  #     InstanceType: t2.micro
  #     SubnetId: !Ref mySubnet1
  #     IamInstanceProfile: !Ref myIamInstanceProfile
  #     UserData: # sudo reboot
  #       'Fn::Base64':
  #         !Sub |
  #           #!/bin/bash -xe
  #           cd /home/ec2-user/webservice
  #           sed -i -e 's/"NAME": "webservice_db"/"NAME": "${DbName}"/' ./django_project_1/settings.py
  #           sed -i -e 's/"USER": "root"/"USER": "${DbName}"/' ./django_project_1/settings.py
  #           sed -i -e 's/"PASSWORD": "abc12345"/"PASSWORD": "${DbPassword}"/' ./django_project_1/settings.py
  #           sed -i -e 's/"HOST": "127.0.0.1"/"HOST": "${myRdsDbInstance.Endpoint.Address}"/' ./django_project_1/settings.py
  #           sed -i -e 's/AWS_STORAGE_BUCKET_NAME = ""/AWS_STORAGE_BUCKET_NAME = "${MyS3Bucket.Arn}"/' ./django_project_1/settings.py
  #           sed -i -e 's/arn:aws:s3::://' ./django_project_1/settings.py
  #           echo "DB_Username=${DbName}\nDB_pw=${DbPassword}\nDB_hostname=${myRdsDbInstance.Endpoint.Address}\nS3_bucket=${MyS3Bucket.Arn}" >> info.txt
  #           ls
  #           sudo reboot

Outputs:
  VpcId:
    Description: VPC ID
    Value: !Ref myVPC
  Subnet1Id:
    Description: Subnet 1 ID
    Value: !Ref mySubnet1
  Subnet2Id:
    Description: Subnet 2 ID
    Value: !Ref mySubnet2
  Subnet3Id:
    Description: Subnet 3 ID
    Value: !Ref mySubnet3
  InternetGatewayId:
    Description: Internet Gateway ID
    Value: !Ref myInternetGateway
  RouteTableId:
    Description: Route Table ID
    Value: !Ref myRouteTable
  RouteId:
    Description: Route ID
    Value: !Ref myRoute
